class Menu
types
-- TODO Define types here
values
-- TODO Define values here
instance variables

		public static EMPTY : int := 0;
		public static PIECEP1 : int := 1;
		public static PIECEP2 : int := 2;
		
		-- falta print dos headers e do end -- ver depois de testar

		public static squares: map int to char := {
				EMPTY            |-> ' ',
				PIECEP1          |-> 'X',
				PIECEP2          |-> '+'
		};
		
operations
	
		public static print: Player * Player ==> ()
				print(p1,p2) == 
				(
						IO`println("\n\n*The Cathedral*");
					
					
						IO`print("\n");
						IO`print(p1.playerName);
						IO`print(" Vs ");
						IO`print(p2.playerName);
						IO`println("\n");
						
				);
		
		public static printBoard: Board ==> ()
				printBoard(board) == 
				(
						dcl square : int := EMPTY;
						
						for y = 1 to 10 do (
								if y <> Board`BOARD_SIZE+1 then 
								(
									IO`print(" ");
									IO`print(y);
									IO`print("|");
								);
								for x = 1 to 10 do (
										let boardSquare in set board.boardSquares be st boardSquare.x = x and boardSquare.y = y in (
												
												if boardSquare.hasPiece then (
														if boardSquare.piece.playerID = 1 then(
															square:= PIECEP1;
															)
														else square:= PIECEP2;
												)
												
												else (
														square:= EMPTY;
												);
												
												IO`print(squares(square));
												
										)
								
								);
								
								IO`print("|");
								IO`println(y);
								
						);
						
						IO`println(" ");
						IO`println(" ");
						
				);
	
		public static printWinner: Player ==> ()
					printWinner(player) ==
					(
							IO`println(" ");
							IO`print(player.playerName);
							IO`print(" is the winner of the game!");
					);
		
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Menu