class Board
types
	public BoardSquares = set of BoardSquare;
values
	public static BOARD_SIZE: int = 10;
	
instance variables
	public boardSquares: BoardSquares := {};
	inv card(boardSquares) >= 1; 
operations

public Board: ()  ==> Board
			Board () == 
			(
			
				-- Generates Squares for the Board
				for all x in set {1, ..., BOARD_SIZE}  do (
					for all y in set {1, ..., BOARD_SIZE} do (
						boardSquares := boardSquares union {new BoardSquare(x,y)};
					)
				);
				
				-- Sets the board reference in each house to self
				for all h1 in set boardSquares do h1.setBoard(self);
			)
		post card(boardSquares) = BOARD_SIZE * BOARD_SIZE;
		
	public mark: seq of int ==> ()
				 mark(coords) ==
				 (
				 		let bs in set boardSquares be st bs.x = coords(BoardSquare`X) and bs.y = coords(BoardSquare`Y) in
				 		(
				 				bs.setHasPiece(true);
				 		
				 		);
				 
				 )
				 pre BoardSquare`verifyCoords(coords);
		
		--TODO: Ver
		
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Board