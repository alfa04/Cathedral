class Piece
types
-- TODO Define types here
values
	public static POSITION_DEFAULT : int = 0;
	public static POSITION_ROT90 : int = 1;
	public static POSITION_ROT180 : int = 2;
	public static POSITION_ROT270 : int = 3;
	
	static positions : map int to (seq of int) = {
		--TODO: Rever multiplicações -> para inversões
		POSITION_DEFAULT	|-> [1, 1],
		POSITION_ROT90  	|-> [1, 1],
		POSITION_ROT180 	|-> [-1,-1],
		POSITION_ROT270  	|-> [-1,-1] 
	};
instance variables
	public static id : int :=0;
	--coordenada inicial da peça
	public initialCoord : BoardSquare`coords;
	public coords: set of BoardSquare`coords := {};
	public pos: int := 1;
	public nSquaresUsed: int :=1;
	public typ: int := 1;
	public board: Board;
	public myID: int;

		--inv checkPosition(position);
		inv len initialCoord = 2;
		inv id >= 0;
		--inv card(coords) >= 0 and card(coords) <= size;
	
	
operations
	 public Piece: BoardSquare`coords * int * int * Board ==> Piece
	 Piece(coord, position, type, b) ==
	 (
		 	initialCoord := coord;
		 	pos := position; -- 0-default, 1-invertidaY, 2-invertidaX
		 	typ := type; -- (MUDAR NOME) 0-default, 1-horizontal
		 	board := b;
		 	coords := {coord};
		 	myID := id +1;
		 	id := myID;
		 	
		 	
			if (typ = 0)
				then (
		 	-- Cathedral 
	    --  1 
	    -- 234 
	    --  5
	    --  6
	    
	    -- Em Y
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`X)-positions(pos)(BoardSquare`X)*1,
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]	
		 		};
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`X),
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]
		 		};
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1,
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]
		 		};
		 	-- #5
		 		coords := coords union { [coord(BoardSquare`X),
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*2]
		 		};
		 	-- #6
		 		coords := coords union { [coord(BoardSquare`X),
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*3]
		 		};	 
		 		
		 		-- Em X
		 		--   4
		 		-- 1 3 5 6 
		 		--   2
		 	-- #2
		 		coords := coords union { [coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1,
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1]
		 		};
	
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`Y),
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1]
		 		};
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`Y)-positions(pos)(BoardSquare`Y)*1,
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1]
		 		};
		 	-- #5
		 		coords := coords union { [coord(BoardSquare`Y),
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*2]
		 		};
		 	-- #6
		 		coords := coords union { [coord(BoardSquare`Y),
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*3]
		 		};	 
		 		)
		 		else if (typ = 1)
		 			then (
		 	-- Castle 
	    --  1 5 |  432   com default e rot180
	    --  234 |  5 1
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`X),
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]	
		 		};
		 		
		  -- #3
		 		coords := coords union { [coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1,
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]	
		 		};
		 		
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*2,
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]	
		 		};
		 		
		 	-- #5
		 		coords := coords union { [coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*2,
		 															coord(BoardSquare`Y)]	
		 		};	
		 		)
		 		else if (typ = 1)
		 			then(
		 	-- Castle 
	    --  54 
	    --   3 com position ROT90 e ROT270
	    --  12 
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1,
		 															coord(BoardSquare`X)]	
		 		};
		 		
		  -- #3
		 		coords := coords union { [coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1,
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1]	
		 		};
		 		
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*2,
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1]	
		 		};
		 		
		 	-- #5
		 		coords := coords union { [coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*2,
		 															coord(BoardSquare`X)]	
		 		};	
		 		)
		 		else if (typ = 2)
		 			then(
		 	-- Stable
	    --  1
	    --  2
	    
	    -- Em Y
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`X),
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]	
		 		};
		 	
		 	-- Em X
		 		
		 	-- #2
		 		coords := coords union { [coord(BoardSquare`Y),
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1]	
		 		};
		 		)
		 		else if (typ = 3)
		 			then(
		  -- Bridge
	    --  1
	    --  2
	    --  3
	    
	    -- Em Y
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`X),
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]	
		 		};
		 		
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`X),
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*2]	
		 		};
		 		
		 	-- Em X
		 		
		 	-- #2
		 		coords := coords union { [coord(BoardSquare`Y),
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1]	
		 		};
		 		
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`Y),
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*2]	
		 		};
		 		)
		 		else if (typ = 4)
		 			then(
		 	-- Inn
	    --  1
	    --  23
	    
	    -- Em Y
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`X),
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]	
		 		};
		 		
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1,
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]	
		 		};	
		 		
		 	-- Em X	
		 		
		 	 -- #2
		 		coords := coords union { [coord(BoardSquare`Y),
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1]	
		 		};
		 		
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1,
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1]	
		 		};
		 		)
		 		else if (typ = 5)
		 			then(
		  -- Square
	    --  14
	    --  23
	    
	    -- Em Y
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`X),
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]	
		 		};
		 		
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1,
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]	
		 		};	
		 		
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1,
		 															coord(BoardSquare`Y)]	
		 		};
		 		
		 	 -- Em X
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`Y),
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1]	
		 		};
		 		
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1,
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1]	
		 		};	
		 		
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1,
		 															coord(BoardSquare`X)]	
		 		};
		 		)
		 		else if (typ = 6)
		 			then(
		 	-- Abbey
	    --  1
	    --  23
	    --   4 
	    
	    -- Em Y
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`X),
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]	
		 		};
		 		
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1,
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]	
		 		};	
		 		
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1,
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*2]	
		 		};	
		 		
		 	-- Em X
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`Y),
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1]	
		 		};
		 		
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1,
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1]	
		 		};	
		 		
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1,
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*2]	
		 		};
		 		)
		 		else if (typ = 7)
		 			then(
		 	-- Manor
	    --   1
	    --  234
	    -- 
	    
	    -- Em Y   
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`X)-positions(pos)(BoardSquare`X)*1,
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]	
		 		};
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`X),
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]
		 		};
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1,
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]
		 		};
		 		
		 	-- Em X   
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`Y)-positions(pos)(BoardSquare`Y)*1,
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1]	
		 		};
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`Y),
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1]
		 		};
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1,
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1]
		 		};
		 		)
		 		else if (typ = 8)
		 			then(
		 	-- Tower
	    --   	1
	    --   23 
	    --  45  
	    
	    -- Em Y
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`X)-positions(pos)(BoardSquare`X)*1,
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]	
		 		};
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`X),
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]
		 		};
		 	
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`X)-positions(pos)(BoardSquare`X)*2,
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*2]
		 		};
		 		
		 	-- #5
		 		coords := coords union { [coord(BoardSquare`X)-positions(pos)(BoardSquare`X)*1,
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*2]
		 		};
		 		
		 	-- Em X
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`Y)-positions(pos)(BoardSquare`Y)*1,
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1]	
		 		};
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`Y),
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1]
		 		};
		 	
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`Y)-positions(pos)(BoardSquare`Y)*2,
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*2]
		 		};
		 		
		 	-- #5
		 		coords := coords union { [coord(BoardSquare`Y)-positions(pos)(BoardSquare`Y)*1,
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*2]
		 		};
		 		)
		 		else if (typ = 9)
		 			then(
		 	-- Infirmary o x está no meio
	    --   2
	    --  314 
	    --   5  
	    
	    -- Em Y
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`X),
		 															coord(BoardSquare`Y)-positions(pos)(BoardSquare`Y)*1]	
		 		};
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`X)-positions(pos)(BoardSquare`X)*1,
		 															coord(BoardSquare`Y)]
		 		};
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1,
		 															coord(BoardSquare`Y)]
		 		};
		 	-- #5
		 		coords := coords union { [coord(BoardSquare`X),
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]
		 		};
		 		
		 	-- Em X
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`Y),
		 															coord(BoardSquare`X)-positions(pos)(BoardSquare`X)*1]	
		 		};
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`Y)-positions(pos)(BoardSquare`Y)*1,
		 															coord(BoardSquare`X)]
		 		};
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1,
		 															coord(BoardSquare`X)]
		 		};
		 	-- #5
		 		coords := coords union { [coord(BoardSquare`Y),
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1]
		 		};
		 		)
		 		else if (typ = 10)
		 			then(
		 	-- Academy
	    --   1
	    --  23 
	    --   45  
	    
	    -- Em Y
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`X)-positions(pos)(BoardSquare`X)*1,
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]	
		 		};
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`X),
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]
		 		};
		 		
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`X),
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*2]
		 		};
		 		
		 	-- #5
		 		coords := coords union { [coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1,
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*2]
		 		};
		 	
		 	-- Em X
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`Y)-positions(pos)(BoardSquare`Y)*1,
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1]	
		 		};
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`Y),
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1]
		 		};
		 		
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`Y),
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*2]
		 		};
		 		
		 	-- #5
		 		coords := coords union { [coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1,
		 															coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*2]
		 		};
		 	)
		 	else(coords := coords; --REVER
		 	-- Tavem 
	    --  1 
	    --  
	    -- just initial coord)
	 		)
	 		
	 		)
	 		
	 
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Piece