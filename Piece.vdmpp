class Piece
types
-- TODO Define types here
values
	public static POSITION_DEFAULT : int = 0;
	public static POSITION_INVERT_Y : int = 1;
	public static POSITION_INVERT_X : int = 2;
	
	static positions : map int to (seq of int) = {
		--TODO: Rever multiplicações -> para inversões
		POSITION_DEFAULT	|-> [1, 1],
		POSITION_INVERT_Y	|-> [1,-1], -- inversão em peça default
		POSITION_INVERT_X	|-> [-1,1] --inversão em peça horizontal
	};
instance variables
	public static id : int :=0;
	--coordenada inicial da peça
	public initialCoord : BoardSquare`coords;
	public coords: set of BoardSquare`coords := {};
	public position: int := 1;
	public nSquaresUsed: int :=1;
	public board: Board;
	public myID: int;

		inv checkPosition(position);
		inv len initialCoord = 2;
		inv id >= 0;
		inv card(coords) >= 0 and card(coords) <= size;
	
	
operations
	 public Piece: BoardSquare`coords * int * int * Board ==> Piece
	 Piece(coord, pos, leng, b) ==
	 (
		 	initialCoord := coord;
		 	pos := position; -- 0-default, 1-invertidaY, 2-invertidaX
		 	length := leng; -- (MUDAR NOME) 0-default, 1-horizontal
		 	board := b;
		 	coords := {coord};
		 	myID := id +1;
		 	id := myID;
		 	
		 	-- Cathedral 
	    --  1 
	    -- 234 
	    --  5 
	    --  6
	    -- #2
		 		coords := coords union { [coord(BoardSquare`X)-positions(pos)(BoardSquare`X)*1,
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]	
		 		};
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`X),
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]
		 		};
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`X)+positions(pos)(BoardSquare`X)*1,
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*1]
		 		};
		 	-- #5
		 		coords := coords union { [coord(BoardSquare`X),
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*2]
		 		};
		 	-- #6
		 		coords := coords union { [coord(BoardSquare`X),
		 															coord(BoardSquare`Y)+positions(pos)(BoardSquare`Y)*3]
		 		};	 
	 		)
	 
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Piece