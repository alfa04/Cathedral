class Piece
types
-- TODO Define types here
values
	public static POSITION_DEFAULT : int = 0;
	public static POSITION_ROT90   : int = 1;
	public static POSITION_ROT180  : int = 2;
	public static POSITION_ROT270  : int = 3;
	
	static positions : map int to (seq of int) = {
		POSITION_DEFAULT	|-> [1, 0],
		POSITION_ROT90  	|-> [0, 1],
		POSITION_ROT180 	|-> [-1,0], 
		POSITION_ROT270  	|-> [0,-1] 
	};
instance variables
	public static id : int :=0;
	--coordenada inicial da peça
	public initialCoord : BoardSquare`coords;
	public coords: set of BoardSquare`coords := {};
	public pos: int := 1;
	public nSquaresUsed: int :=1;
	public piece: Piece;
	public typ: int := 1;
	public board: Board;
	public myID: int;
	public played: bool := false;

		inv checkPosition(pos);
		inv len initialCoord = 2;
		inv id >= 0;
		--inv card(coords) >= 0 and card(coords) <= size;
	
	
operations
	 public Piece: BoardSquare`coords * int * int * Board ==> Piece
	 Piece(coord, position, type, b) ==
	 (
		 	initialCoord := coord;
		 	pos := position; -- [Angulo de rotação] -> 0-default, 1-ROT90, 2-ROT180, 3-ROT270
		 	typ := type; -- [Tipo de peça] -> 0-Cathedral, 1-Castle, 2-Stable, 3-Bridgem, 4-Inn, 5-Square, 6-Abbey, 7-Manor, 8-Tower, 9-Infirmary, 10-Academy, 11-Tavem
		 	board := b;
		 	coords := {coord};
		 	myID := id +1;
		 	id := myID;
		 	
		 	
			if typ = 0
				then (
		 	-- Cathedral 
	    --  1 
	    -- 234 
	    --  5
	    --  6
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`X)+(((-1)*positions(pos)(BoardSquare`X)) + 1*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((1*positions(pos)(BoardSquare`X)) - (-1)*(positions(pos)(BoardSquare`Y)))]	
		 		};
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`X)+((0*positions(pos)(BoardSquare`X)) + 1*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((1*positions(pos)(BoardSquare`X)) - 0*(positions(pos)(BoardSquare`Y)))]
		 		};
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`X)+((1*positions(pos)(BoardSquare`X)) + 1*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((1*positions(pos)(BoardSquare`X)) - 1*(positions(pos)(BoardSquare`Y)))]
		 		};
		 	-- #5
		 		coords := coords union { [coord(BoardSquare`X)+((0*positions(pos)(BoardSquare`X)) + 2*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((2*positions(pos)(BoardSquare`X)) - 0*(positions(pos)(BoardSquare`Y)))]
		 		};
		 	-- #6
		 		coords := coords union { [coord(BoardSquare`X)+((0*positions(pos)(BoardSquare`X)) + 3*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((3*positions(pos)(BoardSquare`X)) - 0*(positions(pos)(BoardSquare`Y)))]
		 		};	  
		 		)
		 		elseif typ = 1
		 			then (
		 	--  Castle 
	    -- _______
	    --  1   5 
	    --  2 3 4
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`X)+((0*positions(pos)(BoardSquare`X)) + 1*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((1*positions(pos)(BoardSquare`X)) - 0*(positions(pos)(BoardSquare`Y)))]	
		 		};
		  -- #3
		 		coords := coords union { [coord(BoardSquare`X)+((1*positions(pos)(BoardSquare`X)) + 1*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((1*positions(pos)(BoardSquare`X)) - 1*(positions(pos)(BoardSquare`Y)))]	
		 		};
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`X)+((2*positions(pos)(BoardSquare`X)) + 1*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((1*positions(pos)(BoardSquare`X)) - 2*(positions(pos)(BoardSquare`Y)))]	
		 		};
		 	-- #5
		 		coords := coords union { [coord(BoardSquare`X)+((2*positions(pos)(BoardSquare`X)) + 0*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((0*positions(pos)(BoardSquare`X)) - 2*(positions(pos)(BoardSquare`Y)))]	
		 		};	
		 		)
		 		elseif typ = 2
		 			then(
		 	-- Stable
	    --  1
	    --  2
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`X)+((0*positions(pos)(BoardSquare`X)) + 1*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((1*positions(pos)(BoardSquare`X)) - 0*(positions(pos)(BoardSquare`Y)))]	
		 		};
		 		)
		 		elseif typ = 3
		 			then(
		  -- Bridge
	    --  1
	    --  2
	    --  3

	    -- #2
		 		coords := coords union { [coord(BoardSquare`X)+((0*positions(pos)(BoardSquare`X)) + 1*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((1*positions(pos)(BoardSquare`X)) - 0*(positions(pos)(BoardSquare`Y)))]	
		 		};
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`X)+((0*positions(pos)(BoardSquare`X)) + 2*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((2*positions(pos)(BoardSquare`X)) - 0*(positions(pos)(BoardSquare`Y)))]	
		 		};
		 		)
		 		elseif typ = 4
		 			then(
		 	-- Inn
	    --  1
	    --  23

	    -- #2
		 		coords := coords union { [coord(BoardSquare`X)+((0*positions(pos)(BoardSquare`X)) + 1*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((1*positions(pos)(BoardSquare`X)) - 0*(positions(pos)(BoardSquare`Y)))]	
		 		};
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`X)+((1*positions(pos)(BoardSquare`X)) + 1*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((1*positions(pos)(BoardSquare`X)) - 1*(positions(pos)(BoardSquare`Y)))]	
		 		};	
		 		)
		 		elseif typ = 5
		 			then(
		  -- Square
	    --  14
	    --  23
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`X)+((0*positions(pos)(BoardSquare`X)) + 1*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((1*positions(pos)(BoardSquare`X)) - 0*(positions(pos)(BoardSquare`Y)))]	
		 		};
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`X)+((1*positions(pos)(BoardSquare`X)) + 1*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((1*positions(pos)(BoardSquare`X)) - 1*(positions(pos)(BoardSquare`Y)))]	
		 		};
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`X)+((1*positions(pos)(BoardSquare`X)) + 0*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((0*positions(pos)(BoardSquare`X)) - 1*(positions(pos)(BoardSquare`Y)))]	
		 		};
		 		)
		 		elseif typ = 6
		 			then(
		 	-- Abbey
	    --  1
	    --  23
	    --   4 
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`X)+((0*positions(pos)(BoardSquare`X)) + 1*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((1*positions(pos)(BoardSquare`X)) - 0*(positions(pos)(BoardSquare`Y)))]	
		 		};
		 		
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`X)+((1*positions(pos)(BoardSquare`X)) + 1*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((1*positions(pos)(BoardSquare`X)) - 1*(positions(pos)(BoardSquare`Y)))]	
		 		};	
		 		
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`X)+((1*positions(pos)(BoardSquare`X)) + 2*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((2*positions(pos)(BoardSquare`X)) - 1*(positions(pos)(BoardSquare`Y)))]	
		 		};	
		 		)
		 		elseif typ = 7
		 			then(
		 	-- Manor
	    --   1
	    --  234
	    -- 

	    -- #2
		 		coords := coords union { [coord(BoardSquare`X)+(((-1)*positions(pos)(BoardSquare`X)) + 1*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((1*positions(pos)(BoardSquare`X)) - (-1)*(positions(pos)(BoardSquare`Y)))]	
		 		};
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`X)+((0*positions(pos)(BoardSquare`X)) + 1*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((1*positions(pos)(BoardSquare`X)) - 0*(positions(pos)(BoardSquare`Y)))]
		 		};
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`X)+((1*positions(pos)(BoardSquare`X)) + 1*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((1*positions(pos)(BoardSquare`X)) - 1*(positions(pos)(BoardSquare`Y)))]
		 		};
		 		)
		 		elseif typ = 8
		 			then(
		 	-- Tower
	    --   	1
	    --   23 
	    --  45  
	    
	    -- #2
		 		coords := coords union { [coord(BoardSquare`X)+(((-1)*positions(pos)(BoardSquare`X)) + 1*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((1*positions(pos)(BoardSquare`X)) - (-1)*(positions(pos)(BoardSquare`Y)))]	
		 		};
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`X)+((0*positions(pos)(BoardSquare`X)) + 1*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((1*positions(pos)(BoardSquare`X)) - 0*(positions(pos)(BoardSquare`Y)))]
		 		};
		 	
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`X)+(((-2)*positions(pos)(BoardSquare`X)) + 2*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((2*positions(pos)(BoardSquare`X)) - (-2)*(positions(pos)(BoardSquare`Y)))]
		 		};
		 		
		 	-- #5
		 		coords := coords union { [coord(BoardSquare`X)+(((-1)*positions(pos)(BoardSquare`X)) + 2*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((2*positions(pos)(BoardSquare`X)) - (-1)*(positions(pos)(BoardSquare`Y)))]
		 		};
		 		)
		 		elseif typ = 9
		 			then(
		 	-- Infirmary - o x (eixo de rotação) está no meio
	    --   2
	    --  314 
	    --   5  

	    -- #2
		 		coords := coords union { [coord(BoardSquare`X)+((0*positions(pos)(BoardSquare`X)) + (-1)*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+(((-1)*positions(pos)(BoardSquare`X)) - 0*(positions(pos)(BoardSquare`Y)))]	
		 		};
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`X)+(((-1)*positions(pos)(BoardSquare`X)) + 0*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((0*positions(pos)(BoardSquare`X)) - (-1)*(positions(pos)(BoardSquare`Y)))]
		 		};
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`X)+((1*positions(pos)(BoardSquare`X)) + 0*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((0*positions(pos)(BoardSquare`X)) - 1*(positions(pos)(BoardSquare`Y)))]
		 		};
		 	-- #5
		 		coords := coords union { [coord(BoardSquare`X)+((0*positions(pos)(BoardSquare`X)) + 1*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((1*positions(pos)(BoardSquare`X)) - 0*(positions(pos)(BoardSquare`Y)))]
		 		};

		 		)
		 		elseif typ = 10
		 			then(
		 	-- Academy
	    --   1
	    --  23 
	    --   45  

	    -- #2
		 		coords := coords union { [coord(BoardSquare`X)+(((-1)*positions(pos)(BoardSquare`X)) + 1*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((1*positions(pos)(BoardSquare`X)) - (-1)*(positions(pos)(BoardSquare`Y)))]	
		 		};
		 	-- #3
		 		coords := coords union { [coord(BoardSquare`X)+((0*positions(pos)(BoardSquare`X)) + 1*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((1*positions(pos)(BoardSquare`X)) - 0*(positions(pos)(BoardSquare`Y)))]
		 		};
		 		
		 	-- #4
		 		coords := coords union { [coord(BoardSquare`X)+((0*positions(pos)(BoardSquare`X)) + 2*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((2*positions(pos)(BoardSquare`X)) - 0*(positions(pos)(BoardSquare`Y)))]
		 		};
		 		
		 	-- #5
		 		coords := coords union { [coord(BoardSquare`X)+((1*positions(pos)(BoardSquare`X)) + 2*(positions(pos)(BoardSquare`Y))),
		 															coord(BoardSquare`Y)+((2*positions(pos)(BoardSquare`X)) - 1*(positions(pos)(BoardSquare`Y)))]
		 		};
		 	)
		 	else coords := coords; -- TODO: REVER aqui tem de ter um type tambem
		 	-- Tavem 
	    --  1 
	    --  
	    -- just initial coord)
	  )
	 		
	 		-- Atendendo à forma das peças, são estes os valores possiveis para x e y
	 		--pre	forall x in set {-2,2},y in set {(-1),3} & BoardSquare`verifyCoords([x] ^ [y])
			
	post fill_boardSquares();
	
	public fill_boardSquares: ()==> bool
		fill_boardSquares() ==
		(
			for all coord in set coords do
			(
				let bs in set board.boardSquares be st bs.x = coord(BoardSquare`X) and bs.y = coord(BoardSquare`Y) in
			  (
					bs.hasPiece := true; 
					bs.piece := self;
				);
			);
			return true;
		)
		
		
	pre forall coord in set coords &
		let bs in set board.boardSquares be st bs.x = coord(BoardSquare`X) and bs.y = coord(BoardSquare`Y) in
		(
			not bs.hasPiece
		);

	--public inc: () ==> ()
	--	inc() == hits := hits +1
	--pre hits < size
	--post hits <= size;
	
	--public isDown : () ==> bool
	--isDown() == return size = hits;
	 		
	 		
	 		
	 
functions

public static checkPosition : int -> bool
					checkPosition(pos) ==
					pos in set {POSITION_DEFAULT, POSITION_ROT90, POSITION_ROT180, POSITION_ROT270};
traces
-- TODO Define Combinatorial Test Traces here
end Piece